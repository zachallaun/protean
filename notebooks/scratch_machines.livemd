# Scratch Machines

## Misc

Example using types and returning actions directly.

```elixir
defmodule TodosMachine do
  use Protean

  alias Protean.Action

  @type context :: %{
    todo: String.t(),
    todos: [TodoMachine.context()],
    filter: :all | :active | :completed
  }

  @type events ::
    {:event, "NEWTODO.CHANGE", value :: String.t()}
    | {:event, "NEWTODO.COMMIT", value :: String.t()}
    | {:event, "TODO.COMMIT", TodoMachine.todo()}
    | {:event, "TODO.DELETE", TodoMachine.todo()}
    | {:event, "SHOW", filter}
    | {:event, "ALL.COMPLETED", nil}
    | {:event, "ALL.ACTIVE", nil}
    | {:event, "CLEAR_COMPLETED", nil}

  @machine [
    context: %{
      todo: "",
      todos: [],
      filter: :all
    },
    initial: :loading,
    states: [
      loading: [
        entry: ["spawn_todos"],
        always: :ready
      ],
      ready: []
    ],
    on: [
      "NEWTODO.CHANGE": [
        actions: ["update_new_todo"]
      ],
      "NEWTODO.COMMIT": [
        actions: ["create_new_todo"],
        when: fn %{todo: todo}, _ -> String.trim(todo) != "" end
      ],
      "TODO.COMMIT": [
        actions: ["update_todo"]
      ],
      "TODO.DELETE": [
        actions: ["delete_todo"]
      ],
      SHOW: [
        actions: ["set_filter"]
      ],
      "ALL.COMPLETED": [
        actions: ["send_all_completed"]
      ],
      "ALL.ACTIVE": [
        actions: ["send_all_active"]
      ],
      CLEAR_COMPLETED: [
        actions: ["stop_completed", "remove_completed"]
      ]
    ]
  ]

  @impl true
  def pure("update_new_todo", _context, {:event, _, value}, _),
    do: Action.assign(todo: value)

  def pure("create_new_todo", %{todos: todos, todo: todo}, _, _) do
    with new_todo <- TodoMachine.new_todo(todo),
         entry <- {new_todo.id, Action.spawn({TodoMachine, new_todo}, new_todo} do
      Action.assign(todo: "", todos: [entry | todos])
    end
  end

  def pure("update_todo", %{todos: todos}, {:event, _, updated}, _) do
    with {_, pid, todo} <- List.keyfind(todos, updated.id, 0),
         todo <- Map.merge(todo, updated),
         todos <- List.keyreplace(todos, todo.id, 0, {todo.id, pid, todo}) do
      Action.assign(todos: todos)
    end
  end

  def pure("delete_todo", %{todos: todos}, {:event, _, todo}, _),
    do: Action.assign(todos: List.keydelete(todos, todo.id, 0))

  def pure("set_filter", _context, {:event, _, filter}, _),
    do: Action.assign(filter: filter)

  def pure("send_all_completed", %{todos: todos}, _, _) do
    todos
    |> Enum.map(fn {_, pid, _} -> pid end)
    |> Action.send_event("SET_COMPLETED")
  end

  def pure("send_all_active", %{todos: todos}, _, _) do
    todos
    |> Enum.map(fn {_, pid, _} -> pid end)
    |> Action.send_event("SET_ACTIVE")
  end

  def pure("stop_completed", %{todos: todos}, _, _) do
    pids =
      todos
      |> Enum.filter(fn {_, _, todo} -> todo.completed end)
      |> Enum.map(fn {_, pid, _} -> pid end)

    Action.stop(pids)
  end

  def pure("remove_completed", %{todos: todos}, _, _) do
    todos
    |> Enum.filter(fn {_, _, todo} -> !todo.completed end)
    |> Action.assign(to: :todos)
  end
end
```

Same as above but using a `Plug.Conn` style API where `state` is piped through and every action essentially returns a new `state`.

```elixir
defmodule TodosMachine do
  use Protean

  alias Protean.Action

  @type context :: %{
          todo: String.t(),
          todos: [TodoMachine.context()],
          filter: :all | :active | :completed
        }

  @type events ::
          {"NEWTODO.CHANGE", value :: String.t()}
          | {"NEWTODO.COMMIT", value :: String.t()}
          | {"TODO.COMMIT", TodoMachine.todo()}
          | {"TODO.DELETE", TodoMachine.todo()}
          | {"SHOW", filter}
          | {"ALL.COMPLETED", nil}
          | {"ALL.ACTIVE", nil}
          | {"CLEAR_COMPLETED", nil}

  @machine [
    context: %{
      todo: "",
      todos: [],
      filter: :all
    },
    initial: :loading,
    states: [
      loading: [
        entry: ["spawn_todos"],
        always: :ready
      ],
      ready: []
    ],
    on: [
      "NEWTODO.CHANGE": [
        actions: ["update_new_todo"]
      ],
      "NEWTODO.COMMIT": [
        actions: ["create_new_todo"],
        when: fn %{todo: todo}, _ -> String.trim(todo) != "" end
      ],
      "TODO.COMMIT": [
        actions: ["update_todo"]
      ],
      "TODO.DELETE": [
        actions: ["delete_todo"]
      ],
      SHOW: [
        actions: ["set_filter"]
      ],
      "ALL.COMPLETED": [
        actions: ["send_all_completed"]
      ],
      "ALL.ACTIVE": [
        actions: ["send_all_active"]
      ],
      CLEAR_COMPLETED: [
        actions: ["stop_completed"]
      ]
    ]
  ]

  @impl true
  def pure("update_new_todo", %{event: {_name, value}} = state, _context),
    do: assign(state, :todo, value)

  def pure("create_new_todo", state, %{todos: todos, todo: todo}) do
    new_todo = TodoMachine.new_todo(todo)
    spawn_action = Action.spawn({TodoMachine, new_todo})
    entry = {new_todo.id, spawn_action, new_todo}

    assign(state, %{todo: "", todos: [entry | todos]})
  end

  def pure("update_todo", state, %{todos: todos}) do
    %{event: {_, updated_todo}} = state

    with {_, pid, todo} <- List.keyfind(todos, updated_todo.id, 0),
         todo <- Map.merge(todo, updated_todo),
         todos <- List.keyreplace(todos, todo.id, 0, {todo.id, pid, todo}) do
      assign(state, :todos, todos)
    end
  end

  def pure("delete_todo", state, %{todos: todos}) do
    %{event: {_, todo}} = state
    assign(state, :todos, List.keydelete(todos, todo.id, 0))
  end

  def pure("set_filter", %{event: {_, filter}} = state, _context),
    do: assign(state, :filter, filter)

  def pure("send_all_completed", state, %{todos: todos}) do
    pids = Enum.map(todos, fn {_, pid, _} -> pid end)
    Action.send_event(state, "SET_COMPLETED", to: pids)
  end

  def pure("send_all_active", state, %{todos: todos}) do
    pids = Enum.map(todos, fn {_, pid, _} -> pid end)
    Action.send_event(state, "SET_ACTIVE", to: pids)
  end

  def pure("stop_completed", state, %{todos: todos}) do
    completed = Enum.filter(todos, fn {_id, _pid, todo} -> todo.completed end)

    state
    |> assign(:todos, todos -- completed)
    |> Action.stop(Enum.map(completed, &elem(&1, 1)))
  end
end
```

```elixir
defmodule DelayedTransitionMachine do
  alias Protean.Action

  use Protean,
    machine: [
      initial: :a,
      states: [
        a: [
          exit: ["a_exit"],
          after: [
            delay: 1000,
            target: :b
          ]
        ],
        b: [
          entry: ["b_entry"]
        ]
      ]
    ]

  def pure(_, _, _, _), do: nil

  def effect(effect, _, _, _), do: IO.puts("effect: #{effect}")
end

children = [
  DelayedTransitionMachine
]

{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
```

```elixir
Protean.current(DelayedTransitionMachine)
```

```elixir
defmodule SimpleMachine do
  alias Protean.Action

  use Protean,
    machine: [
      initial: :foo,
      states: [
        foo: [
          entry: ["foo_entry"],
          exit: ["foo_exit"],
          on: [goto_bar: :bar]
        ],
        bar: [
          entry: ["bar_entry"],
          exit: ["bar_exit"],
          on: [
            goto_baz: [
              target: :baz,
              actions: [Action.send_event("goto_foo", delay: 2000)]
            ]
          ]
        ],
        baz: [
          entry: ["baz_entry"],
          exit: ["baz_exit"],
          on: [
            goto_foo: :foo,
            goto_bar: :bar
          ]
        ]
      ]
    ]

  def pure(_, _, _, _), do: nil

  def effect(effect, _, _, _), do: IO.puts("effect: #{effect}")
end

children = [
  SimpleMachine
]

{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
```

```elixir
Protean.current(SimpleMachine)
```

```elixir
Protean.send(SimpleMachine, "goto_bar")
```

```elixir
Protean.send(SimpleMachine, {:event, "goto_baz", nil})
:timer.sleep(500)
Protean.send(SimpleMachine, "goto_bar")
```

```elixir
defmodule PureMachine1 do
  use Protean,
    machine: [
      initial: :a,
      context: %{
        acc: []
      },
      on: [
        goto_a: :a
      ],
      states: [
        a: [
          initial: :a1,
          entry: ["entering_a"],
          exit: ["exiting_a"],
          on: [
            goto_b: :b
          ],
          states: [
            a1: [
              on: [
                goto_a2: :a2
              ]
            ],
            a2: [
              a2_goto_b: :"#b"
            ]
          ]
        ],
        b: []
      ]
    ]

  @impl true
  def pure("entering_a", context, _event, _meta) do
    IO.inspect("entering a!")
    %{context | acc: ["entering_a" | context.acc]}
  end

  @impl true
  def effect("entering_a", context, _event, _meta) do
    IO.inspect(context, label: "bound context")
  end

  def pure("exiting_a", context, _event, _meta) do
    %{context | acc: ["exiting_a" | context.acc]}
  end
end
```

```elixir
alias Protean.Interpreter

interpreter =
  Interpreter.new(PureMachine1.protean_machine(), PureMachine1)
  |> Interpreter.start()
```

## More complex example

Let's code out a "backend" for the [TodoMVC Example](https://codesandbox.io/s/xstate-todomvc-33wr94qv1?from-embed=&file=/todoMachine.js) from the XState docs. This will be a good example for dealing with many spawned machines, since the example uses a machine to handle the behavior of each individual todo.

```elixir
defmodule TodosMachine do
  use Protean,
    machine: [
      context: %{
        # new todo
        todo: "",
        todos: [],
        # :all | :active | :completed
        filter: :all
      },
      initial: :loading,
      states: [
        loading: [
          entry: ["spawn_todos"],
          always: :ready
        ],
        ready: []
      ],
      on: [
        "NEWTODO.CHANGE": [
          actions: ["update_new_todo"]
        ],
        "NEWTODO.COMMIT": [
          actions: ["create_new_todo"],
          cond: fn _, event -> String.trim(event.value) != "" end
        ],
        "TODO.COMMIT": [
          actions: ["update_todo"]
        ],
        "TODO.DELETE": [
          actions: ["delete_todo"]
        ],
        SHOW: [
          actions: ["set_filter"]
        ],
        "ALL.COMPLETED": [
          actions: ["send_all_completed"]
        ],
        "ALL.ACTIVE": [
          actions: ["send_all_active"]
        ],
        CLEAR_COMPLETED: [
          actions: ["stop_completed", "remove_completed"]
        ]
      ]
    ]

  alias Protean.Action

  def pure("spawn_todos", %{todos: todos} = context, _, _) do
    todos =
      todos
      |> Enum.map(&Map.put(&1, :pid, spawn_todo_machine(&1)))

    {context, Action.assign(todos: todos)}
  end

  def pure("update_new_todo", context, %{value: value}, _) do
    %{context | todo: value}
  end

  def pure("create_new_todo", context, _, _) do
    %{todo: todo, todos: todos} = context
    new_todo = %{id: uuid(), title: todo, completed: false}
    new_todo = Map.put(new_todo, :ref, spawn_todo_machine(&1))

    {%{context | todo: ""}, Action.assign(todos: [new_todo | todos])}
  end

  def pure("update_todo", %{todos: todos} = context, %{todo: todo}, _) do
    todos =
      Enum.map(todos, fn
        %{id: ^todo.id} = t -> Map.merge(t, todo)
        t -> t
      end)

    %{context | todos: todos}
  end

  def pure("delete_todo", %{todos: todos} = context, %{todo: todo}, _) do
    todos = Enum.filter(todos, &(&1.id !== todo.id))
    %{context | todos: todos}
  end

  def pure("set_filter", context, %{filter: filter}, _) do
    %{context | filter: filter}
  end

  def pure("send_all_completed", %{todos: todos} = context, _, _) do
    pids = Enum.map(todos, & &1.pid)
    {context, &Action.send(pids, "SET_COMPLETED")}
  end

  def pure("send_all_active", %{todos: todos} = context, _, _) do
    pids = Enum.map(todos, & &1.pid)
    {context, &Action.send(pids, "SET_ACTIVE")}
  end

  defp spawn_todo_machine(todo) do
    Action.spawn({TodoMachine.new(todo), TodoMachine})
  end
end
```

```elixir
defmodule TodoMachine do
  use Protean, machine: &new/1

  alias Protean.Action

  def new(%{id: id, title: title, completed: completed}) do
    Protean.Machine.new(
      context: %{
        id: id,
        title: title,
        prev_title: title,
        completed: completed
      },
      initial: :reading,
      on: [
        TOGGLE_COMPLETE: [
          actions: [
            Actions.assign(completed: true),
            "commit"
          ]
        ],
        DELETE: :deleted
      ],
      states: [
        reading: [
          on: [
            SET_COMPLETED: [
              actions: [
                Action.assign(completed: true),
                "commit"
              ]
            ],
            TOGGLE_COMPLETE: [
              actions: [
                Action.assign(completed: fn ctx, _ -> !ctx.completed end),
                "commit"
              ]
            ],
            SET_ACTIVE: [
              actions: [
                Action.assign(completed: false),
                "commit"
              ]
            ],
            EDIT: [
              target: :editing,
              actions: "focus_input"
            ]
          ]
        ],
        editing: [
          entry: Action.assign(prev_title: fn ctx, _ -> ctx.title end),
          on: [
            CHANGE: [
              actions: Action.assign(title: fn _, e -> e.value end)
            ],
            COMMIT: [
              [
                target: :reading,
                cond: fn ctx, _ -> String.trim(ctx.title) != "" end,
                actions: "commit"
              ],
              [
                target: :deleted
              ]
            ],
            BLUR: [
              target: :reading,
              actions: "commit"
            ],
            CANCEL: [
              target: :reading,
              actions: Action.assign(title: fn ctx, _ -> ctx.prev_title end)
            ]
          ]
        ],
        deleted: [
          entry: Action.send_parent(fn ctx, _ -> {"TODO.DELETE", ctx} end)
        ]
      ]
    )
  end

  @impl true
  def pure("commit", context, _event, _meta) do
    {context, Action.send_parent({"TODO.COMMIT", context})}
  end

  @impl true
  def effect("focus_input", _context, _event, _meta) do
    # ...
  end
end
```

## Playing with API

Right now I have a sort of "special" API built on top of GenServer that is using private module attributes to pattern match on the correct messages. This means that any code interacting with a machine would need to be able to use the Protean API, aka `Protean.send` in order to make sure that the correct `{@protean_event, event}` message is sent.

What if we instead just defined a public convention for sending messages to the running server? That way you don't actually have to know about Protean at all, you can just use `GenServer` as usually. Does this buy us anything useful?

```elixir
Protean.send(MyMachine, "some_event")

GenServer.call(MyMachine, {:event, "some_event"})
GenServer.call(MyMachine, {:event, "some_event", %{data: [1, 2, 3]}})
```

One thing this may get us is better `invoke` semantics for handling invoked processes. Instead of having to differentiate between machines and other OTP services, it can just be whatever service we want that responds to the `{:event, event_name, event_data}` format. This would be especially useful for autoforwarding -- imagine we just want to log/keep all incoming events from our machine, we could set up a really simple GenServer that just handles the event message instead of having to match on `@protean_event` or whatever.

This definitely seems like the way to go!

```elixir
defmodule EventLogger do
  use GenServer

  def init(_) do
    {:ok, nil}
  end

  def handle_call({:event, event_name, event_data}, from, state) do
    {:reply, :ok, state, {:continue, {:log_event, event_name, event_data, from}}}
  end

  def handle_continue({:log_event, event_name, event_data, from}, state) do
    log_event(event_name, event_data, from)
    {:noreply, state}
  end

  def log_event(name, data, from) do
    Logger.info("Event #{inspect(name)} from #{inspect(from)} with data: #{inspect(data)}")
  end
end
```
