# Scratchpad

## TODOs

* [x] Parse machine config into state node / transition representation
* [x] keep ID map for all state nodes in machine
* [x] know what state nodes are active for the current state configuration
* [x] basic transitions, start with innermost children and transition if they or ancestor responds to event
* [x] ensure transitions to compound nodes automatically enter the initial node
* [x] implement config/parsing/data model for parallel states
* [ ] transitions to parallel states
* [ ] edge cases for parallel states - how to handle when one parallel child wants to exit entire parallel state but other wants to transition within itself?
* [ ] handle transition precedence based on specificity/order/etc.
* [ ] conditional transitions
* [ ] automatic transitions
* [ ] action execution

## Machine Config

```elixir
alias Protean.{Machine}
```

Defining the state machine in terms of state nodes and transitions.

I think the internal types for these should be relatively rigid and normalized by a transformation step that can occur to get from machine config to these types.

```elixir
machine =
  Machine.new(
    initial: :state_a,
    states: [
      state_a: [
        on: [
          "event.b": :state_b,
          "event.b2": :"state_b.state_b2"
        ]
      ],
      state_b: [
        initial: :state_b1,
        states: [
          state_b1: [
            on: [
              "event.b2": :state_b2
            ]
          ],
          state_b2: [
            on: [
              "event.c": :"#state_c"
            ]
          ]
        ]
      ],
      state_c: [
        type: :final
      ]
    ]
  )
```

```elixir
Map.keys(machine.idmap)
```

## Actions

My early sketches for Protean assumed that actions would be handled by "Handler" modules that could just pattern match on strings, e.g. `def handle_action("some_action_name", context, event)`. This isn't enough though: we need actions to be mapped to some kind of data type that allows the interpreter to infer whether it can be executed/resolved without side effects (like `assign`, `pure`, `send`, etc.) or whether it needs to be executed later.

The question then becomes: how do we specify these sorts of action types in an Elixir-idiomatic way? (Since having a bunch of anonymous functions is kinda gnarly in Elixir).

```elixir
defmodule MyMachine do
  use Protean,
    machine: [
      initial: :foo,
      context: %{
        places_ive_been: []
      },
      states: [
        foo: [
          enter: "add_to_places_ive_been",
          on: [
            goto_bar: :bar
          ]
        ],
        bar: [
          enter: ["add_to_places_ive_been", "log_places_ive_been"],
          type: :final
        ]
      ]
    ]

  @protean :assign
  def handle_action("add_to_places_ive_been", context, _event, %{state: s}) do
    update_in(context.places_ive_been, &[s.value | &1])
  end

  @protean :effect
  def handle_action("log_places_ive_been", %{places_ive_been: places}, _event) do
    IO.inspect(places, label: "Places I've been")
  end
end
```

```elixir
defmodule MyMachine do
  use Protean,
    machine: [
      initial: :foo,
      context: %{
        places_ive_been: []
      },
      states: [
        foo: [
          enter: "add_to_places_ive_been",
          on: [
            goto_bar: :bar
          ]
        ],
        bar: [
          enter: ["add_to_places_ive_been", "log_places_ive_been"],
          type: :final
        ]
      ]
    ],
    actions: [
      add_to_places_ive_been:
        Protean.Actions.assign(fn context, _event, %{state: s} ->
          update_in(context.places_ive_been, &[s.value | &1])
        end),
      log_places_ive_been: fn context, _event ->
        IO.inspect(places, label: "Places I've been")
      end
    ]
end
```

```elixir
defmodule MyMachine do
  use Protean,
    machine: [
      initial: :foo,
      context: %{
        places_ive_been: []
      },
      states: [
        foo: [
          enter: "add_to_places_ive_been",
          on: [
            goto_bar: :bar
          ]
        ],
        bar: [
          enter: ["add_to_places_ive_been", "log_places_ive_been"],
          type: :final
        ]
      ]
    ]

  @impl Protean
  def pure("add_to_places_ive_been", context, _event, %{state: s}) do
    update_in(context.places_ive_been, &[s.value | &1])
  end

  @impl Protean
  def effect("log_places_ive_been", %{places_ive_been: places}, _event, _meta) do
    IO.inspect(places, label: "Places I've been")
  end
end
```

^ This seems pretty promising. Basically each action is broken down into two major handler types, `pure` and `effect`. Default catch-all implementations can be defined for both. `Machine.transition` can basically call all the `pure` handlers, and the interpreter could then call all the `effect` handlers.

With different return "shapes", `pure` could be a catch-all action creator/context assigner. For instance:

```elixir
defmodule MyMachine do
  use Protean,
    machine: [
      # ...
    ]

  alias Protean.Action

  @impl Action
  def pure("assign some stuff", context, {_, data}, _meta) do
    update_in(context.some_list, &[data.value | &1])
  end

  @impl Action
  def pure("same as above", context, {_, data}, _meta) do
    context = update_in(context.some_list, &[data.value | &1])
    # or {context, []}
    {context, nil}
  end

  @impl Action
  def pure("assign and send", context, {_, data}, _meta) do
    context = update_in(context.some_list, &[data.value | &1])
    {context, Action.send("some_event")}
  end

  @impl Action
  def pure("assign and send more", context, {_, data}, _meta) do
    context = update_in(context.some_list, &[data.value | &1])
    {context, [Action.send("some_event"), Action.send(context.some_ref, "some_event")]}
  end

  @impl Action
  def pure("getting crazy", context, _event, _meta) do
    {context, ["some effectful action"]}
  end

  @impl Action
  def effect("some effectful action", _context, _event, _meta) do
    IO.puts("Woo!")
  end
end
```

```elixir
def Protean.Action do
  alias __MODULE__
  alias Protean.{Context, Event}

  @type t :: %Action{}

  @type action_name :: String.t()

  @type unresolved :: action_name | function | Action.t()

  @type pure_value ::
          nil
          # assign new context
          | Context.t()
          # same
          | {Context.t(), nil}
          # assign new context and inject action
          | {Context.t(), Action.unresolved()}
          # same
          | {Context.t(), [Action.unresolved()]}

  @callback pure(action_name, Context.t(), Event.t(), Protean.metadata()) :: pure_value
end
```

This is seeming pretty good. There can be a number of `Action` creators as well in case people want to use them in the way they do in XState.

<!-- livebook:{"force_markdown":true} -->

```elixir
Action.pure(fn -> ... end)
Action.send("event")
Action.send({"event", "event data"})
Action.send(pid, "event")
Action.send_parent("event")
Action.assign(foo: Action.spawn_link(SomeOtherMachine))
# etc.
```

```elixir
defmodule Protean do
  defmodule Unimplemented, do: defstruct([])
end

defmodule Protean.Action do
  alias __MODULE__
  alias Protean.{Machine, Context, State, Event, Unimplemented}

  # This might all belong in the interpreter because it needs to define various
  # actions like spawning new machines, etc.
  defprotocol Executable do
    @spec exec(executable, Context.t(), Event.t(), Protean.metadata()) :: :ok
    def exec(executable, context, event, metadata)
  end

  defimpl Executable, for: Function do
    def exec(fun, context, event, metadata) do
      fun.(context, event, metadata)
      :ok
    end
  end

  defimpl Executable, for(Action) do
    def exec(action, _context, _event, _metadata) do
      %Action{
        handler: module,
        name: name,
        context: context,
        metadata: metadata
      } = action

      apply(module, :effect, [name, context, metadata.event, metadata])

      :ok
    end
  end

  # ...maybe?
  @typedoc "Resolved actions implement the `Executable` protocol"
  @type resolved :: any

  @doc """
  Resolves the actions associated with a state to a new state and a list of
  side-effecting actions that can be executed by an interpreter.
  """
  @spec resolve_actions(State.t(), Module.t()) :: {State.t(), [Action.resolved()]}
  def resolve_actions(%State{} = state, handler) do
    %State{
      value: value,
      context: context,
      actions: actions,
      event: event
    } = state

    metadata = %{state: %{value: value}, event: event}

    resolve_actions(actions, context, handler, meta)
  end

  defp resolve_actions([action | rest], context, handler, meta) do
    {context, r1} = resolve_action(action, context, handler, meta)
    {context, r2} = resolve_actions(rest, context, handler, meta)
    {context, r1 ++ r2}
  end

  defp resolve_actions([], context, _handler, _meta),
    do: {context, []}

  @spec resolve_action(Action.unresolved(), Context.t(), Module.t(), Protean.metadata()) ::
          {Context.t(), [Action.resolved()]}
  defp resolve_action(action, context, handler, meta)

  defp resolve_action(action, context, handler, meta) when is_binary(action) do
    {context, resolved} = resolve_pure(action, context, handler, meta)

    action = %Action{
      handler: handler,
      name: name,
      context: context,
      metadata: meta
    }

    {state, [action | resolved]}
  end

  defp resolve_pure(action_name, context, handler, meta) do
    args = [action_name, context, meta.event, meta]

    handler
    |> apply(:pure, args)
    |> resolve_pure_value(context, handler, meta)
  end

  # Normalizes the return value of the call to `handler.pure/4`
  defp resolve_pure_value(value, context, handler, meta)

  defp resolve_pure_value(nil, context, _handler, _meta),
    do: {context, []}

  defp resolve_pure_value(%{} = new_context, _context, _handler, _meta),
    do: {new_context, []}

  defp resolve_pure_value({new_context, nil}, _context, _handler, _meta),
    do: {new_context, []}

  defp resolve_pure_value({new_context, unresolved}, context, handler, meta)
       when not is_list(unresolved),
       do: resolve_pure_value({new_context, [unresolved]}, context, handler, meta)

  defp resolve_pure_value({new_context, unresolved}, _context, handler, meta)
       when is_list(unresolved),
       do: resolve_actions(unresolved, new_context, handler, meta)
end
```

I was thinking that instead of the above -- where I sort of string the updated context through each action, "binding" it (by storing it in `Action` structs) to actions that can be executed later -- I could just create `assign` actions that basically just say "set the context to this" and then do all the actual context updating in the `execute` function that the interpreter runs.

I actually wonder though if all of this would be simplified with `Stream.unfold`. Unfold takes an acc and a function and basically the stream finishes when the function returns nil. So the acc would be something like `{context, actions}` and it would return nil when we run out of actions.

```elixir
defmodule Protean.Action do
  @doc """
  Resolves actions to `{action, context}` pairs that can be executed later by
  an interpreter.
  """
  def resolve_actions(actions, context, handler, meta) do
    {nil, context, actions}
    |> Stream.unfold(&resolve_next_action(&1, handler, meta))
    |> Enum.flat_map(fn
      {nil, _, _} -> []
      {action, context, _} -> [{action, context}]
    end)
  end

  def resolve_actions(nil, _context, _handler, _meta), do: []
  def resolve_actions([], _context, _handler, _meta), do: []

  def resolve_next_action({context, _resolved, [action | rest]}, handler, meta) do
    case resolve_action(action, context, handler, meta) do
      {action, context, unresolved} -> {action, context, List.wrap(unresolved) ++ rest}
      {action, context} -> {action, context, rest}
    end
  end

  def resolve_next_action({_resolved, _context, []}, _handler, _meta), do: nil

  @spec resolve_action(Action.unresolved(), Context.t(), Module.t(), Protean.metadata()) ::
          {Action.resolved() | nil, Context.t(), [Action.unresolved()]}
          | {Action.resolved() | nil, Context.t()}
  def resolve_action(action, context, handler, meta)

  def resolve_action(action, context, handler, meta) when is_binary(action) do
    {context, unresolved} = resolve_pure(action, context, handler, meta)

    effect_action = %Action{
      handler: handler,
      name: action,
      context: context,
      metadata: meta
    }

    {effect_action, context, unresolved}
  end

  def resolve_action(action, context, handler, meta) when is_function(action) do
    {context, action}
  end

  def resolve_action(%Assign{} = action, context, handler, meta) do
    # ...
  end

  def resolve_action(%Send{} = action, context, handler, meta) do
    # ...
  end

  def resolve_action(%SomeOtherThing{} = action, context, handler, meta) do
    # ...
  end
end
```

```elixir
defmodule Protean.Interpreter do
  @moduledoc """
  The `Protean.Interpreter` is a `GenServer` process primarily responsible for interpreting
  and executing a `Protean.Machine`. This includes accepting incoming events, executing
  transitions and actions, spawning child machines/processes, etc.

  This module is usually not invoked used directly, but instead defines the behavior that
  is used by modules that `use Protean`. See `Protean` for client API.
  """

  use GenServer

  alias __MODULE__
  alias Protean.{Machine, Action, State, Context}

  @protean_event :"$protean.event"

  defstruct [:machine, :state, :handler]

  @type t :: %Interpreter{
    machine: Machine.t(),
    state: State.t(),
    handler: Module.t()
  }

  @impl true
  def init(machine, opts \\ []) do
    interpreter = %Interpreter{
      machine: machine,
      state: Machine.initial_state(machine),
      handler: Keyword.fetch!(opts, :handler)
    }

    {:ok, interpreter}
  end

  @impl true
  def handle_call({@protean_event, event}, from, interpreter) do
    {:noreply, interpreter, {:continue, {@protean_event, event, from, [reply_to: from]}}}
  end

  @impl true
  def handle_cast({@protean_event, event}, from, interpreter) do
    {:noreply, interpreter, {:continue, {@protean_event, event, from}}}
  end

  @impl true
  def handle_continue({@protean_event, event, from, opts \\ []}, interpreter) do
    %Interpreter{
      machine: machine
      state: state,
    } = interpreter

    state = Machine.transition(machine, state, event)
    interpreter = execute(%{interpreter | state: state})
    
    if reply_to = opts[:reply_to] do
      GenServer.reply(reply_to, interpreter.state)
    end

    {:noreply, interpreter}
  end

  defp execute(interpreter) do
    %Interpreter{
      state: state,
      handler: handler
    } = interpreter

    %State{
      actions: actions,
      context: context
    } = state
    
    bound_actions =
      Action.resolve_actions(actions, context, handler, Protean.metadata(state))

    Enum.reduce(bound_actions, interpreter, &Executable.exec!/2)
  end

  defprotocol Executable do
    @spec exec({Action.resolved(), Context.t()}, Interpreter.t()) :: Interpreter.t()
    def exec(action, interpreter)
  end

  defimpl Executable, for: Function do
    def exec({fun, context}, %{state: state} = interpreter) do
      fun.(context, state.event, Protean.metadata(state))
      interpreter
    end
  end

  defimpl Executable, for: Action.Effect do
    def exec({action_name, context}, %{state: state, handler: handler} = interpreter) do
      apply(handler, :effect, [action_name, context, state.event, Protean.metadata(state)])
      interpreter
    end
  end

  defimpl Executable, for: Action.Assign do
    def exec({assign, context}, %{state: state} = interpreter) do
      # potentially handle spawns/etc.
      interpreter
    end
  end
end
```

Thinking through the main even loop ([SCXML link](https://www.w3.org/TR/scxml/#AlgorithmforSCXMLInterpretation)) as it applies to Elixir. And what state the Interpreter is likely to need.

```elixir
defmodule Interpreter do
  defstruct [
    :machine,
    :state,
    :handler,
    running: true,
    internal_queue: :queue.new()
  ]

  # SCXML main event loop:
  #
  # 0. if running, continue, otherwise exit interpreter
  # 1. handle automatic transitions
  #   - if any exit, microstep and go to 1
  # 2. handle internal queue
  #   - if event, select transitions, microstep, and go to 1
  # 3. handle invokes
  #   - if states to invoke, invoke them
  #   - if invoking added event to internal queue, go to 1
  # 4. wait for external event
  #   - if termination event received, exit interpreter
  #   - if regular event received, select transitions, microstep, and go to 0

  @doc """
  Entrypoint for the interpreter, ensuring that any automatic transitions are run,
  internal events handled, invokes invoked, etc. before waiting for an external event.
  """
  def run_interpreter(%Interpreter{running: true} = interpreter),
    do: run_automatic_transitions(interpreter)

  def run_interpreter(%Interpreter{running: false} = interpreter),
    do: exit_interpreter(interpreter)

  @doc """
  Handler for external event with "run-to-completion" semantics: ensures that the
  interpreter is either ready to receive the next event or is no longer running.
  """
  def handle_event(interpreter, event)

  def handle_event(interpreter, @protean_terminate),
    do: exit_interpreter(interpreter)

  def handle_event(interpreter, {@protean_event, event}) do
    interpreter
    |> autoforward_event(event)
    |> process_event(event)
  end

  def run_automatic_transitions(interpreter) do
    case select_automatic_transitions(interpreter) do
      [] ->
        process_internal_queue(interpreter)

      transitions ->
        transitions
        |> microstep(interpreter)
        |> run_interpreter()
    end
  end

  def process_internal_queue(%Interpreter{internal_queue: queue} = interpreter) do
    case :queue.out(queue) do
      {:empty, _} ->
        process_invokes(interpreter)

      {{:value, event}, queue} ->
        %{interpreter | internal_queue: queue}
        |> process_event(event)
    end
  end

  def process_event(interpreter, event) do
    interpreter
    |> select_transitions(event)
    |> microstep(interpreter)
    |> run_interpreter()
  end

  def process_invokes(interpreter) do
    case select_invokes(interpreter) do
      [] ->
        interpreter

      invokes ->
        interpreter
        |> invoke(invokes)
        |> loop_if_internal_event()
    end
  end

  def loop_if_internal_event(%Interpreter{internal_queue: queue} = interpreter) do
    if :queue.is_empty(queue) do
      interpreter
    else
      run_interpreter(interpreter)
    end
  end

  def autoforward_event(%Interpreter{invokes: invokes} = interpreter, event) do
    invokes
    |> Enum.filter(&autoforward?/1)
    |> Enum.reduce(interpreter, &autoforward_to(&1, event, &2))
  end

  def autoforward?(%{autoforward: true}), do: true
  def autoforward?(_invoke), do: false

  def autofoward_to(%{pid: pid}, event, interpreter) do
    # TODO: do we need to handle failures here? can add to internal queue
    # if errors occur.
    send_event_async(pid, event)
    interpreter
  end

  @doc """
  A `microstep` processes a single set of transitions, updating the state configuration
  and executing the resulting actions.
  """
  def microstep(transitions, interpreter)

  def microstep([], interpreter), do: interpreter

  def microstep(transitions, interpreter) do
    %Interpreter{
      machine: machine,
      state: state
    } = interpreter

    state = Machine.take_transitions(machine, state, transitions)
    execute(%Interpreter{interpreter | state: state})
  end
end
```

```elixir
defmodule StateNode do
  @doc """
  Returns true if the given complex node is in a final state given a list of
  currently active simple nodes.
  """
  @spec in_final?(StateNode.complex(), [StateNode.simple(), ...]) :: boolean
  def in_final?(node, active)

  def in_final?(%StateNode{type: :compound} = node, active) do
    # compound node is in final state if any of its children
    # are final states and are members of the active set
    Enum.any?(node.states, fn child ->
      is_final?(child) && is_active?(child, active)
    end)
  end

  def in_final?(%StateNode{type: :parallel} = node, active) do
    # parallel node is in final state if all of its children
    # are in final states
    Enum.all?(node.states, fn child ->
      in_final?(child, active)
    end)
  end

  @doc """
  Returns true if the given node is active given a list of currently active
  simple nodes.
  """
  @spec is_active?(StateNode.t(), [StateNode.simple(), ...]) :: boolean
  def is_active?(node, active) do
    active
    |> Enum.flat_map(&ancestor_ids)
    |> Enum.any?(&(&1 == node.id))
  end

  @doc """
  Returns true if the given `StateNode` represents a final state.
  """
  @spec is_final?(StateNode.t()) :: boolean
  def is_final?(%StateNode{type: :final}), do: true
  def is_final?(%StateNode{}), do: false
end
```
