# Notes on XState

## XState

This Livebook contains notes on XState's implementation and decisions and how that might map to idiomatic Elixir.

<!-- livebook:{"break_markdown":true} -->

**Major concepts in XState:**

* _Machines_ are a data and behaviour description of finite state machines.
  * The machine configuration describes the (possibly-nested) states that a machine can be in and the events that cause the machine to change when they're in a particular state.
  * They are created by passing a machine configuration and machine options to `createMachine`. The preferred usage of XState is that the machine configuration is a serializable data description and does not use any inlined or direct function references, but instead string identifiers. Those handlers are then passed as the machine options, decoupling the machine description from behaviour implementation details.
* _Events_ are passed to the machine and trigger changes depending on the machine's current state.
* _Context_ is an extension to the machine's basic state and can change over time.
* A machine's _State_ is a representation of the system at a certain point in time: it's state value, context, the event that caused it to reach this state, any actions that may need to be performed, etc.
* _State Nodes_ (implementation detail) are the individual nodes of a machine configuration and can be one of a number of types, including `atomic` (a leaf node), `compound` (a node that contains other child states), `parallel` (a node containing multiple states that the machine can be in at the same time), `final` (a node representing a "terminal" state), and `history` (a node resolving to its parent's most recent history state).
* _Transitions_ are a purely functional update of a machine from one state to the next. The process of executing a transition gathers a description of actions (side-effects) that should occur as a result of the transition, but it is a running process' responsibility to execute those actions.
* _Guards_ **TODO**
* _Invoked Services_ **TODO**
* _History_ **TODO**
* _Interpreter_ **TODO**

<!-- livebook:{"break_markdown":true} -->

### Misc Notes

**Docs**

It's [possible](https://hexdocs.pm/elixir/1.13/Task.html) (search for `the @doc annotation`) to attach the `@doc` immediately before a `use Whatever`, presumably by outputting a function definition as the first thing. This would let you "natively" document your Protean machines:

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule SomeMachine do
  @moduledoc """
  This is module documentation for SomeMachine.
  """

  @doc """
  This documentation can be attached to some function definition defined by the below.
  """
  use Protean, machine: [
    # ...
  ]
end
```

<!-- livebook:{"break_markdown":true} -->

**Potential API for using machines**

<!-- livebook:{"force_markdown":true} -->

```elixir
# Starting a machine
{:ok, pid} = Protean.start(SomeMachine)
{:ok, pid} = Protean.start_link(SomeMachine)
children = [
  Supervisor.child_spec(SomeMachine, id: Machine1)
]
Supervisor.start_link(children, strategy: :one_for_one)

# Functional usage
machine = Protean.Machine.new(SomeMachine)
machine = SomeMachine.new()
machine = Protean.Machine.new(SomeMachine, %{initial: :context})
machine = SomeMachine.new(%{initial: :context})
machine = SomeMachine.new(%{initial: :context}, SomeCustomHandler)

state = machine.initial_state
next_state = Protean.Machine.transition(machine, state, {"SOME_EVENT", "event_data"})
:ok = Protean.Machine.exec_actions(next_state.actions)
next_state = Protean.Machine.transition(machine, next_state, "SOME_OTHER_EVENT")
:ok = Protean.Machine.exec_actions(next_state.actions) # and so on...
```

Basically: `Protean.Machine` is the functional core, `Protean` is the imperative shell that wraps a `Protean.Machine` in an interface that interacts with OTP and fits into existing language abstractions.

<!-- livebook:{"break_markdown":true} -->

**How it relates to GenServer**

Protean services will be implemented as a GenServer. You should be able to send an event both syncronously (like a `call`) and asyncronously (like a `cast`).

As with XState, there should be a way to subscribe to a machine and receive a notification on transition.

## Comparisons

**Example machine configuration in XState:**

```js
const machine = createMachine({
  id: 'fetch',
  initial: 'idle',
  states: {
    idle: {
      type: 'atomic',
      on: {
        FETCH: { target: 'pending' }
      }
    },
    pending: {
      type: 'parallel',
      states: {
        resource1: {
          type: 'compound',
          initial: 'pending',
          states: {
            pending: {
              on: {
                'FULFILL.resource1': { target: 'success' }
              }
            },
            success: {
              type: 'final'
            }
          }
        },
        resource2: {
          type: 'compound',
          initial: 'pending',
          states: {
            pending: {
              on: {
                'FULFILL.resource2': { target: 'success' }
              }
            },
            success: {
              type: 'final'
            }
          }
        }
      },
      onDone: 'success'
    },
    success: {
      type: 'compound',
      initial: 'items',
      states: {
        items: {
          on: {
            'ITEM.CLICK': { target: 'item' }
          }
        },
        item: {
          on: {
            BACK: { target: 'items' }
          }
        },
        hist: {
          type: 'history',
          history: 'shallow'
        }
      }
    }
  }
});
```

<!-- livebook:{"break_markdown":true} -->

The same configuration in (proposed) Protean:

```elixir
machine_config = [
  id: "fetch",
  initial: :idle,
  states: [
    idle: [
      type: :atomic,
      on: [
        FETCH: [target: :pending]
      ]
    ],
    pending: [
      type: :parallel,
      states: [
        resource1: [
          type: :compound,
          initial: :pending,
          states: [
            pending: [
              on: [
                "FULFILL.resource1": [target: :success]
              ]
            ],
            success: [
              type: :final
            ]
          ]
        ],
        resource2: [
          type: :compound,
          initial: :pending,
          states: [
            pending: [
              on: [
                "FULFILL.resource2": [target: :success]
              ]
            ],
            success: [
              type: :final
            ]
          ]
        ]
      ],
      on_done: :success
    ],
    success: [
      type: :compound,
      initial: :items,
      states: [
        items: [
          on: [
            "ITEM.CLICK": [target: :item]
          ]
        ],
        item: [
          on: [
            BACK: [target: :items]
          ]
        ],
        hist: [
          type: {:history, :shallow}
        ]
      ]
    ]
  ]
]
```

This could be simplified using defaults:

```elixir
machine_config = [
  id: "fetch",
  initial: :idle,
  states: [
    idle: [
      on: [
        FETCH: :pending
      ]
    ],
    pending: [
      type: :parallel,
      states: [
        resource1: [
          initial: :pending,
          states: [
            pending: [
              on: [
                "FULFILL.resource1": :success
              ]
            ],
            success: [
              type: :final
            ]
          ]
        ],
        resource2: [
          initial: :pending,
          states: [
            pending: [
              on: [
                "FULFILL.resource2": :success
              ]
            ],
            success: [
              type: :final
            ]
          ]
        ]
      ],
      on_done: :success
    ],
    success: [
      initial: :items,
      states: [
        items: [
          on: [
            "ITEM.CLICK": :item
          ]
        ],
        item: [
          on: [
            BACK: :items
          ]
        ],
        hist: [
          type: {:history, :shallow}
        ]
      ]
    ]
  ]
]
```

## Mapping XState to Protean

### Events

`ALL_CAPS` event names are a convention and not required in either XState or Protean.

**XState:**

```js
{
  type: 'SOME_EVENT',
  foo: 1,
  bar: 2,
}
// or shorthand if the event has no data:
'SOME_EVENT'
```

**Protean:**

<!-- livebook:{"force_markdown":true} -->

```elixir
{"SOME_EVENT", %{foo: 1, bar: 2}}
# or shorthand if the event has no data:
"SOME_EVENT"
```

Currently thinking that machine configurations will use atoms for event names but they'll be converted into strings internally. This allows us to use the nicer `[EVENT: ...]` syntax instead of having to use `[{"EVENT", ...}]` or other.

Events passed to handlers in Protean will always be the "long" form tuple, even if data is `nil`.

<!-- livebook:{"force_markdown":true} -->

```elixir
def some_handler(_context, {"SOME_EVENT", _data}, _meta) do
  # ...
end
```

<!-- livebook:{"break_markdown":true} -->

### State Nodes

**XState:**

```js
// Node type is...
'atomic'
'compound'
'parallel'
'final'
'history' // with history: 'shallow' or history: 'deep'
```

This means a history node would look like:

```js
{
  type: 'history',
  history: 'shallow',
}
```

**Protean:**

<!-- livebook:{"force_markdown":true} -->

```elixir
# Node type is...
:atomic
:compound
:parallel
:final
{:history, :shallow}
{:history, :deep}
```

This means a history node would look like:

<!-- livebook:{"force_markdown":true} -->

```elixir
[
  type: {:history, :shallow}
]
```

<!-- livebook:{"break_markdown":true} -->

### Invoked Services

[XState Docs: Invoking Services](https://xstate.js.org/docs/guides/communication.html#the-invoke-property)

Services in XState dispatch based on a `src` attribute and their behavior difference depending on the type of source. You can invoke promises, callbacks, observables, and machines. The `src` attribute can be:

* a machine
* a function that returns a promise
* a function that returns a callback handler
* a function that returns an observable
* a string which refers to a source defined in the machine's `options.services`
* an invoke source object which contains `{ type: "src_string_ref", ... }`

Here's how an invoke on a promise might look:

```js
{
  // ...
  loading: {
    invoke: {
      id: 'getUser',
      src: (context, event) => fetchUser(context.userId),
      onDone: {
        target: 'success',
        actions: assign({ user: (context, event) => event.data }),
      },
      onError: {
        target: 'failure',
        actions: assign({ error: (context, event) => event.data }),
      },
    },
  },
  // ...
}
```

Here's how I foresee the same configuration in Protean:

<!-- livebook:{"force_markdown":true} -->

```elixir
[
  loading: [
    invoke: [
      id: :get_user,
      
      src: fn context, event -> User.get(context.user_id) end,
      # or...
      src: {User, :get, &[&1.user_id]},

      on_done: [
        target: :success,
        actions: Action.assign(user: & &1.data)
      ],
      on_error: [
        target: :failure,
        actions: Action.assign(error: & &1.data)
      ],
    ]
  ]
]
```

The invoke and action can also reference strings:

```js
{
  // ...
  loading: {
    invoke: {
      id: 'getUser',
      src: 'fetchUser',
      onDone: {
        target: 'success',
        actions: 'assignUser'
      },
      onError: {
        target: 'failure',
        actions: 'assignError'
      },
    },
  },
}
```

... and in Protean:

<!-- livebook:{"force_markdown":true} -->

```elixir
[
  loading: [
    invoke: [
      id: :get_user,
      src: "get_user",
      on_done: [
        target: :success,
        actions: "assign_user"
      ],
      on_error: [
        target: :failure,
        actions: "assign_error"
      ]
    ]
  ]
]
```

<!-- livebook:{"break_markdown":true} -->

### Machine Options

XState recommends that you decouple actions/services/guards/etc. from the machine configuration and instead reference those things as strings, with implementations passed into the second argument to `createMachine(config, options)`. In the above `loading` example, that might look like:

```js
const machine = createMachine(
  {
    // ...
    states: {
      loading: { /* ... */ },
    },
  },
  {
    services: {
      getUser: (context, event) => fetchUser(context.userId),
    },
    actions: {
      assignUser: assign({ user: (context, event) => event.data }),
      assignError: assign({ error: (context, event) => event.data }),
    },
  }
)
```

It seems more idiomatic to handle this in Elixir by passing a _handler module_ that pattern matches on the string identifier.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule LoadingHandler do
  # Could dynamically define a @behaviour to ensure you handle all the options
  # required for this particular machine config?
  use Protean.Handler, for: LoadingMachine, as: Behaviour
  alias Protean.Action

  @impl LoadingHandler.Behaviour
  def handle_service("get_user", context, _event) do
    {User, :get, [context.user_id]}
  end

  @impl LoadingHandler.Behaviour
  def handle_action("assign_user", _context, %{data: data}) do
    Action.assign(user: data)
  end

  def handle_action("assign_error", _context, %{data: data}) do
    Action.assign(error: data)
  end
end
```

I'm not 100% sure that this level of indirection is worth it. Perhaps the handler would be usually co-located in the same module that defines the machine? That could be the "default" handler, which you could swap out for e.g. testing.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule LoadingMachine do
  use Protean, 
    handler: __MODULE__, 
    as: Handler,
    machine: [
      id: :loading_machine,
      initial: :loading,
      states: [
        loading: [
          invoke: [
            # ...
          ]
        ]
      ]
    ]

  @impl LoadingMachine.Handler
  def handle_service("get_user", context, _event) do
    {User, :get, [context.user_id]}
  end

  @impl LoadingMachine.Handler
  def handle_action("assign_user", _context, %{data: data}) do
    Action.assign(user: data)
  end

  def handle_action("assign_error", _context, %{data: data}) do
    Action.assign(error: data)
  end
end

# an alternative handler, then:

defmodule AltLoadingHandler do
  @behaviour LoadingMachine.Handler

  @impl LoadingMachine.Handler
  def handle_service("get_user", context, _event) do
    # ...
  end

  # ...
end
```

Starting up two machines, one with the alternative handler:

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule MyApp.Application do
  use Application

  def start(_type, _args) do
    children = [
      {MyApp.LoadingMachine, [name: MyApp.Machine1]},
      {MyApp.LoadingMachine, [name: MyApp.Machine2, handler: MyApp.AltLoadingHandler]}
    ]

    Supervisor.start_link(children, strategy: :one_for_one)
  end
end
```
